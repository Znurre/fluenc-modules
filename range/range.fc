namespace Range
{
    function count(...items, any context, function (any, any) predicate)
    {
        return _count(0, ...items, context, predicate);
    }

    function _count(i32 c, any item, any context, function (any, any) predicate)
    {
        if (predicate(item, context))
        {
            return c + 1;
        }

        return c;
    }

    function _count(i32 c, (any item, ...items), any context, function (any, any) predicate)
    {
        if (predicate(item, context))
        {
            return tail _count(c + 1, ...items, context, predicate);
        }

        return tail _count(c, ...items, context, predicate);
    }

    function all(...items, any context, function (any, any) predicate)
    {
        return _all(...items, context, predicate);
    }

    function _all(any item, any context, function (any, any) predicate)
    {
        return predicate(item, context);
    }

    function _all((any item, ...items), any context, function (any, any) predicate)
    {
        if (predicate(item, context))
        {
            return tail _all(...items, context, predicate);
        }

        return false;
    }

    function select(...items, function (any) transformer)
    {
        return _select(...items, transformer);
    }

	function _select((any item, ...items), function (any) transformer)
	{
		return transformer(item) -> _select(...items, transformer);
	}

	function _select(any item, function (any) transformer)
	{
		return transformer(item);
	}

	function aggregate((any item, ...items), any product, function (any, any) operation)
	{
		return tail aggregate(...items, operation(product, item), operation);
	}

	function aggregate(any item, any product, function (any, any) operation)
	{
		return operation(product, item);
	}

	function size((any item, ...items), i32 i)
	{
		return tail size(...items, i + 1);
	}

	function size(any item, i32 i)
	{
		return i + 1;
	}

    function elementAt(any item, i32 index, i32 i)
    {
        if (i == index)
        {
            return item;
        }

        return nothing;
    }

    function elementAt((any item, ...items), i32 index, i32 i)
    {
        if (i == index)
        {
            return item;
        }

        return tail elementAt(...items, index, i + 1);
    }

    function set((any value, ...values), i32 index, any result, i32 i)
    {
        if (i == index)
        {
            return result -> set(...values, index, result, i + 1);
        }

        return value -> set(...values, index, result, i + 1);
    }

    function set(any value, i32 index, any result, i32 i)
    {
        if (i == index)
        {
            return result;
        }

        return value;
    }

    function _iota(i32 i, i32 count)
    {
        if (i < count)
        {
            return i -> _iota(i + 1, count);
        }

        return i;
    }

    function iota(i32 count)
    {
        return _iota(0, count);
    }
}
